// Based on the old version of the forum image uploader

import { insert } from "../../libraries/thirdparty/cs/text-field-edit.js";

export default async function ({ addon, global, console, msg }) {
  function retrieveImageFromClipboardAsBlob(event) {
    return new Promise((resolve, reject) => {
      if (!event.clipboardData) {
        return resolve([]);
      }

      let items = event.clipboardData.items;

      if (items == undefined) return resolve([]);

      let processed = [];
      for (let i = 0; i < items.length; i++) {
        if (items[i].type.indexOf("image") == -1) continue;

        let blob = items[i].getAsFile();

        processed.push(blob);
      }

      resolve(processed);
    });
  }
  function getDimensionsOfImage(blob) {
    return new Promise((resolve, reject) => {
      let filereader = new FileReader()

      filereader.readAsDataURL(blob)

      filereader.onloadend = () => {
        let img = new Image()
        
        img.onload = () => {
          resolve([img.naturalWidth, img.naturalHeight])
        }

        img.src = filereader.result
      }

      filereader.onerror = reject
    })
  }

  async function deleteProject(projectId) {
    let res = await fetch(`https://scratch.mit.edu/site-api/projects/all/${projectId}/`, {
      headers: {
        accept: "application/json, text/javascript, */*; q=0.01",
        "x-csrftoken": addon.auth.csrfToken,
        "x-requested-with": "XMLHttpRequest",
      },
      referrer: "https://scratch.mit.edu/mystuff/",
      body: JSON.stringify({
        visibility: "delbyusr",
      }),
      method: "PUT",
      credentials: "include",
    });
  }
  async function upload(blob, textarea) {
    let token = addon.auth.xToken;

    let createRes = await fetch(`https://projects.scratch.mit.edu`, {
      headers: {
        accept: "*/*",
        "accept-language": "en-US,en;q=0.9",
        "content-type": "application/json",
      },
      referrer: "https://scratch.mit.edu/projects/editor/",
      method: "POST",
      referrerPolicy: "no-referrer-when-downgrade",
      body: '{"targets":[{"isStage":true,"name":"Stage","variables":{"`jEk@4|i[#Fk?(8x)AV.-my variable":["my variable",0]},"lists":{},"broadcasts":{},"blocks":{},"comments":{},"currentCostume":0,"costumes":[{"assetId":"cd21514d0531fdffb22204e0ec5ed84a","name":"backdrop1","md5ext":"cd21514d0531fdffb22204e0ec5ed84a.svg","dataFormat":"svg","rotationCenterX":240,"rotationCenterY":180}],"sounds":[{"assetId":"83a9787d4cb6f3b7632b4ddfebf74367","name":"pop","dataFormat":"wav","format":"","rate":48000,"sampleCount":1123,"md5ext":"83a9787d4cb6f3b7632b4ddfebf74367.wav"}],"volume":100,"layerOrder":0,"tempo":60,"videoTransparency":50,"videoState":"on","textToSpeechLanguage":null},{"isStage":false,"name":"Sprite1","variables":{},"lists":{},"broadcasts":{},"blocks":{},"comments":{},"currentCostume":0,"costumes":[{"assetId":"bcf454acf82e4504149f7ffe07081dbc","name":"costume1","bitmapResolution":1,"md5ext":"bcf454acf82e4504149f7ffe07081dbc.svg","dataFormat":"svg","rotationCenterX":48,"rotationCenterY":50},{"assetId":"0fb9be3e8397c983338cb71dc84d0b25","name":"costume2","bitmapResolution":1,"md5ext":"0fb9be3e8397c983338cb71dc84d0b25.svg","dataFormat":"svg","rotationCenterX":46,"rotationCenterY":53}],"sounds":[{"assetId":"83c36d806dc92327b9e7049a565c6bff","name":"Meow","dataFormat":"wav","format":"","rate":48000,"sampleCount":40681,"md5ext":"83c36d806dc92327b9e7049a565c6bff.wav"}],"volume":100,"layerOrder":1,"visible":true,"x":0,"y":0,"size":100,"direction":90,"draggable":false,"rotationStyle":"all around"}],"monitors":[],"extensions":[],"meta":{"semver":"3.0.0","vm":"0.2.0-prerelease.20210601191643","agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36 Edg/91.0.864.41"}}',
      credentials: "include",
    });

    let createJson = await createRes.json();

    let projectId = createJson["content-name"];

    let titleRes = await fetch(`https://api.scratch.mit.edu/projects/${projectId}`, {
      headers: {
        accept: "application/json",
        "content-type": "application/json",
        "x-token": token,
      },
      referrer: `https://scratch.mit.edu/projects/${projectId}`,
      body: JSON.stringify({"title": "Scratch Image Uploader Autogenerated Project"}),
      method: "PUT",
      mode: "cors",
      credentials: "omit",
    });

    let titleJson = await titleRes.json();

    let thumbnailRes = await fetch(`https://scratch.mit.edu/internalapi/project/thumbnail/${projectId}/set/`, {
      headers: {
        "X-CSRFToken": addon.auth.csrfToken,
      },
      method: "POST",
      body: blob,
      credentials: "include",
    });

    let thumbnailJson = await thumbnailRes.json();

    var url = `https://cdn2.scratch.mit.edu/get_image/project/${projectId}_9000x7200.png`

    if (addon.settings.get('accuracy')) {
      let accurateDimensions = await getDimensionsOfImage(blob)

      url = `https://cdn2.scratch.mit.edu/get_image/project/${projectId}_${accurateDimensions[0]}x${accurateDimensions[1]}.png`
    }
    insert(textarea, url);

    await deleteProject(projectId);
  }
  if (!addon.auth.isLoggedIn) return;

  var selector = "textarea[name='content']";

  if (addon.tab.version == "scratch-www") selector = "textarea.inplace-textarea";

  if (!selector) return;

  while (true) {
    let textarea = await addon.tab.waitForElement(selector, {
      markAsSeen: true,
    });

    let input = document.createElement("input"); // We have to do this so we send the image url to the right textbox
    input.type = "file";
    input.accept = "image/*";
    input.style.display = "none";

    input.addEventListener("change", (e) => {
      let file = input.files[0];
      let reader = new FileReader();

      reader.readAsArrayBuffer(file);

      reader.onloadend = () => {
        upload(reader.result, textarea);
      };

      reader.onerror = (err) => {
        throw err;
      };
    });

    textarea.addEventListener("paste", async (e) => {
      let array = await retrieveImageFromClipboardAsBlob(e);

      array.forEach((blob) => {
        upload(blob, textarea);
      });
    });

    let transparentify = () => {
      textarea.style.backgroundColor = "transparent";
    };

    textarea.addEventListener("dragenter", () => {
      textarea.style.backgroundColor = "rgba(0, 0, 0, 0.1)";
    });

    textarea.addEventListener("dragleave", transparentify);
    textarea.addEventListener("dragend", transparentify);

    textarea.addEventListener("drop", (e) => {
      textarea.style.backgroundColor = "";

      let file = e.dataTransfer.files[0];

      if (!file) return;
      e.preventDefault();
      e.stopPropagation();

      let reader = new FileReader();

      reader.readAsArrayBuffer(file);

      reader.onloadend = () => {
        upload(reader.result, textarea);
      };

      reader.onerror = (err) => {
        throw err;
      };
    });
  }
}
